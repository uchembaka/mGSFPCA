obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
get_UDUT(cvec, basis, inputs$evalGrid, p, k)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
View(cvecCell)
10*5
View(basis)
GCVkp
GCV_res
View(basisCell)
View(basisCell_p)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
GCVk
GCVp
basisCell
View(basisCell)
View(cvecCell)
GCVk
GCVp
c(GCVk, GCVp)
GCVk_res
rbind(GCVk_res, GCVp_res)
which.min(GCVkp[valid_GCV])
GCVkp
c(GCVk, GCVp)
valid_GCV
GCVkp[valid_GCV]
GCVkp
# Combine results for GCV_res
GCVkp <- c(GCVk, GCVp)
GCVkp
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
GCVkp <- c(GCVk, GCVp)
GCVkp
GCVkp
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
GCVkp
c(GCVk, GCVp)
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
plot(PP_100_cor[[8]]$eigFun[1,])
lines(tmp$Phi[,1])
lines(eval_mGSFPCA(tmp, seq(0,1, len=501))[,1])
data = PP_100_cor[[8]]$Y
start_time <- Sys.time()
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = tmp$pars$coeffs, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = tmp$pars$coeffs, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = tmp$pars$coeffs, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
tmp$pars$coeffs
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = tmp$pars$coeffs, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
end_time <- Sys.time()
end_time - start_time
ini
X[:]
c(X)
View(X)
derive_init <- function(coef, Phi, bin_size, nb) {
B <- fda::eval.basis(seq(0, 1, len = bin_size), fda::create.bspline.basis(c(0,1), nb))
CB <- coef[1:(nb * ncol(Phi))]
BC <- B %*% CB
nuC <- (t(B) %*% B) %*% t(B) %*% Phi
return(c(c(nuC), coef[(nb * ncol(Phi)+1): length(coef)]))
}
init <- derive_init(tmp$pars$coeffs,tmp$Phi, 501, 10)
derive_init <- function(coef, Phi, bin_size, nb) {
B <- fda::eval.basis(seq(0, 1, len = bin_size), fda::create.bspline.basis(c(0,1), nb))
CB <- matrix(coef[1:(nb * ncol(Phi))], nb, ncol(Phi))
BC <- B %*% CB
nuC <- (t(B) %*% B) %*% t(B) %*% Phi
return(c(c(nuC), coef[(nb * ncol(Phi)+1): length(coef)]))
}
init <- derive_init(tmp$pars$coeffs,tmp$Phi, 501, 10)
derive_init <- function(coef, Phi, bin_size, nb) {
B <- fda::eval.basis(seq(0, 1, len = bin_size), fda::create.bspline.basis(c(0,1), nb))
CB <- matrix(coef[1:(nb * ncol(Phi))], nb, ncol(Phi))
BC <- B %*% CB
nuC <- (t(B) %*% B) %*% t(B) %*% BC
return(c(c(nuC), coef[(nb * ncol(Phi)+1): length(coef)]))
}
init <- derive_init(tmp$pars$coeffs,tmp$Phi, 501, 10)
init
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = init, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
derive_init <- function(coef, Phi, bin_size, nb) {
B <- fda::eval.basis(seq(0, 1, len = bin_size), fda::create.bspline.basis(c(0,1), nb))
CB <- matrix(coef[1:(nb * ncol(Phi))], nb, ncol(Phi))
BC <- B %*% CB
nuC <- solve(t(B) %*% B) %*% t(B) %*% BC
return(c(c(nuC), coef[(nb * ncol(Phi)+1): length(coef)]))
}
init <- derive_init(tmp$pars$coeffs,tmp$Phi, 501, 10)
start_time <- Sys.time()
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = init, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
tmp2 = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 501, nRegGrid = 501, init_coeff = NULL, optim_trace = 1,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
runif(20, min = -1, max = 1)
data = PP_100_cor[[69]]$Y
data = PP_100_cor[[69]]$Y
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
data = PP_100_cor[[68]]$Y
tmp = mGSFPCA::mGSFPCA(data, p = 3:5, k = c(5, 10, 15, 20), basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
data = PP_100_cor[[1]]$Y
tmp = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 51, nRegGrid = 51, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
plot(tmp$Phi[,1])
plot(-tmp$Phi[,1])
lines(PP_100_cor[[1]]$eigFun[1,])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(tmp$Phi[,1])
lines(eval_mGSFPCA(tmp, seq(0,1,0.002)Phi[,1])
lines(eval_mGSFPCA(tmp, seq(0,1,0.002)[,1])
)
lines(eval_mGSFPCA(tmp, seq(0,1,0.002)[,1])
)
eval_mGSFPCA(tmp, seq(0,1,0.002))
lines(eval_mGSFPCA(tmp, seq(0,1,0.002))[,1])
lines(-eval_mGSFPCA(tmp, seq(0,1,0.002))[,1])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-eval_mGSFPCA(tmp, seq(0,1,0.002))[,1])
tmp = mGSFPCA::mGSFPCA(data, p = 5, k = 10, basis_type = "bspline",
bin_size = 51, nRegGrid = 501, init_coeff = NULL,
obs_range = NULL, mu_nbasis = 15, use_kp_grid = F, skip_check = F)
lines(tmp$Phi[,1])
lines(-tmp$Phi[,1])
fit <- mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = F)
PP_100_cor <- readRDS("~/Desktop/uche/R/P2/Data/RDS/PP_100_cor.RDS")
Y = PP_100_cor[[1]]$Y
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
fda::eval.basis(est_grid, mu_result$basis) %*% mu_result$fdobj$fd$coefs
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
View(comp_data)
gcvData$gcv_pts
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T)
tmp2 <- mGSFPCA::eval_mGSFPCA(fit, seq(0,1, len = 501))
plot(PP_100_cor[[1]]$eigFun[1,])
lines(tmp2)
lines(tmp2[,1])
lines(-tmp2[,1])
Metrics::rmse(-tmp2[,1], PP_100_cor[[1]]$eigFun[1,])
View(fit)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501)# Estimate
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
start_time <- Sys.time()
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = F, nRegGrid = 501)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
get_UDUT(cvec, basis, inputs$evalGrid, p, k)
ord
D
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
cvec
5*10
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
cvec
p
k
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
length(est_pts)
result <- run_optimization(
p_val = best_p,
k_val = best_k,
ini = best_cvec,
SiCell = binData$SiCell,
newData = binData$newData,
est_pts = binData$est_pts,
basis_type = basis,
bin_size = bin_size,
optim_control = optim_control
)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
PP_100_cor <- readRDS("~/Desktop/uche/R/P2/Data/RDS/PP_100_cor.RDS")
Y = PP_100_cor[[1]]$Y
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
lines(fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Y = PP_100_cor[[2]]$Y
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(-fit$Phi[,1])
lines(fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
plot(PP_100_cor[[2]]$eigFun[1,])
lines(fit$Phi[,1])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 51)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(fit$Phi[,1])
plot(PP_100_cor[[2]]$eigFun[1,])
lines(-fit$Phi[,1])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(-fit$Phi[,1])
lines(fit$Phi[,1])
plot(PP_100_cor[[2]]$eigFun[1,])
lines(fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
View(fit)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 15, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(fit$Phi[,1])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 15, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
plot(PP_100_cor[[2]]$eigFun[1,])
lines(fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
Y = PP_100_cor[[1]]$Y
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
Metrics::rmse(fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 15, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit$Lambda
PP_100_cor[[1]]$eigVal
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 51, init_coeff = NULL)
fit$Lambda
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
install.packages("~/Desktop/uche/R/pkgs/mGSFPCA_0.0.0.9001.tar.gz", repos = NULL, type = "source")
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 51)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs
)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
)fit$pars$binData
View(fit$pars$binData)
oldBin = fit$pars$binData
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
View(fit$pars$binData)
View(fit)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
View(fit$pars$binData)
View(oldBin)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
View(fit$pars$binData)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101, init_coeff = NULL)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 51)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F,
nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
View(fit$pars$binData)
seq(0,1,len=101)
seq(0,1,len=51)
View(oldBin)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
cvecCell[valid_GCV][[minGCV]]
result$cvec
View(binData$newData)
View(fit)
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F,
nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = 10, basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 51)# Estimate
plot(PP_100_cor[[1]]$eigFun[1,])
lines(fit$Phi[,1])
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 5, k = 10, basis_type = "bspline", use_kp_grid = F,
nRegGrid = 501, bin_size = 101, init_coeff = fit$pars$coeffs)
fit$pars$coeffs
#testing
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = T, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
fit <- mGSFPCA::mGSFPCA(Y, p = 3:5, k = c(5, 10, 15), basis_type = "bspline", use_kp_grid = F, nRegGrid = 501, bin_size = 101)
plot(PP_100_cor[[1]]$eigFun[1,])
lines(-fit$Phi[,1])
Metrics::rmse(-fit$Phi[,1], PP_100_cor[[1]]$eigFun[1,])
source("~/Desktop/uche/R/pkgs/mGSFPCA/R/doGCV.R")
source("~/Desktop/uche/R/pkgs/mGSFPCA/R/data_prep.R")
source("~/Desktop/uche/R/pkgs/mGSFPCA/R/data_prep.R")
source("~/Desktop/uche/R/pkgs/mGSFPCA/R/doGCV.R")
source("~/Desktop/uche/R/pkgs/mGSFPCA/R/doGCV.R")
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
SCS <- readRDS("~/Desktop/uche/R/P2/Data/RDS/scc.RDS")
SCS_iDTY <- faceDF(SCS$sccList$Ly, SCS$sccList$Lt, F)[,c(2,1,3)]
faceDF <- function(Lt, Ly, Demean = TRUE){
n = length(Ly)
data.mat <- data.frame(argvals = NA, subj = NA, y = NA)[numeric(0),]
for(i in 1:n){
data.mat <- rbind(data.mat, cbind(Lt[[i]], rep(i, length(Lt[[i]])), Ly[[i]] ) )
}
colnames(data.mat) <- c("argvals", "subj", "y")
if(Demean){
mu = faceMu(Ly, Lt, NULL)
data.mat$y <- data.mat$y - mu
}
return(data.mat)
}
SCS_iDTY <- faceDF(SCS$sccList$Ly, SCS$sccList$Lt, F)[,c(2,1,3)]
mGS_SCS <- mGSFPCA::mGSFPCA(SCS_iDTY, p = 3:6, k = 6:11, bin_size = 44, nRegGrid = 44, use_kp_grid = F, obs_range = c(1,44))
View(comp_data)
comp_data[["gcvData"]][["newData"]]
comp_data[["gcvData"]][["est_pts"]]
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
detach("package:mGSFPCA", unload = TRUE)
mGS_SCS <- mGSFPCA::mGSFPCA(SCS_iDTY, p = 3:6, k = 6:11, bin_size = 44, nRegGrid = 44, use_kp_grid = F, obs_range = c(1,44))
library(mGSFPCA)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
detach("package:mGSFPCA", unload = TRUE)
library(mGSFPCA)
faceDF <- function(Lt, Ly, Demean = TRUE){
n = length(Ly)
data.mat <- data.frame(argvals = NA, subj = NA, y = NA)[numeric(0),]
for(i in 1:n){
data.mat <- rbind(data.mat, cbind(Lt[[i]], rep(i, length(Lt[[i]])), Ly[[i]] ) )
}
colnames(data.mat) <- c("argvals", "subj", "y")
if(Demean){
mu = faceMu(Ly, Lt, NULL)
data.mat$y <- data.mat$y - mu
}
return(data.mat)
}
SCS <- readRDS("~/Desktop/uche/R/P2/Data/RDS/scc.RDS")
SCS_iDTY <- faceDF(SCS$sccList$Ly, SCS$sccList$Lt, F)[,c(2,1,3)]
mGS_SCS <- mGSFPCA::mGSFPCA(SCS_iDTY, p = 3:6, k = 6:11, bin_size = 44, nRegGrid = 44, use_kp_grid = F, obs_range = c(1,44))
GCVk
LLKCell
bspline_sim
install.packages("gitcreds")
usethis::create_github_token()
gitcreds::gitcreds_set()
?gitcreds::gitcreds_set()
?gitcreds::gitcreds_set(url = "https://github.com")
gitcreds::gitcreds_set(url = "https://github.com")
usethis::use_git_config(user.name = "uche mbaka", user.email = "uche.mbaka@ucd.ie")
gitcreds::gitcreds_set()
