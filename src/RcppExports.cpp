// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// LSQf
double LSQf(const Eigen::VectorXd& cvec, const List& SiCell, const Eigen::MatrixXd& data, int p, int k, const Eigen::MatrixXd& B, const Eigen::VectorXd& estGrid);
RcppExport SEXP _mGSFPCA_LSQf(SEXP cvecSEXP, SEXP SiCellSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kSEXP, SEXP BSEXP, SEXP estGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cvec(cvecSEXP);
    Rcpp::traits::input_parameter< const List& >::type SiCell(SiCellSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type estGrid(estGridSEXP);
    rcpp_result_gen = Rcpp::wrap(LSQf(cvec, SiCell, data, p, k, B, estGrid));
    return rcpp_result_gen;
END_RCPP
}
// LSQg
Eigen::VectorXd LSQg(const Eigen::VectorXd& cvec, const List& SiCell, const Eigen::MatrixXd& data, int p, int k, const Eigen::MatrixXd& B, const Eigen::VectorXd& estGrid);
RcppExport SEXP _mGSFPCA_LSQg(SEXP cvecSEXP, SEXP SiCellSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kSEXP, SEXP BSEXP, SEXP estGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cvec(cvecSEXP);
    Rcpp::traits::input_parameter< const List& >::type SiCell(SiCellSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type estGrid(estGridSEXP);
    rcpp_result_gen = Rcpp::wrap(LSQg(cvec, SiCell, data, p, k, B, estGrid));
    return rcpp_result_gen;
END_RCPP
}
// NLLKf
double NLLKf(const Eigen::VectorXd& cvec, const List& SiCell, const Eigen::MatrixXd& data, int p, int k, const Eigen::MatrixXd& B, const Eigen::VectorXd& estGrid);
RcppExport SEXP _mGSFPCA_NLLKf(SEXP cvecSEXP, SEXP SiCellSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kSEXP, SEXP BSEXP, SEXP estGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cvec(cvecSEXP);
    Rcpp::traits::input_parameter< const List& >::type SiCell(SiCellSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type estGrid(estGridSEXP);
    rcpp_result_gen = Rcpp::wrap(NLLKf(cvec, SiCell, data, p, k, B, estGrid));
    return rcpp_result_gen;
END_RCPP
}
// NLLKg
Eigen::VectorXd NLLKg(const Eigen::VectorXd& cvec, const std::vector<Eigen::MatrixXd>& SiCell, const Eigen::MatrixXd& data, int p, int k, const Eigen::MatrixXd& B, const Eigen::VectorXd& estGrid);
RcppExport SEXP _mGSFPCA_NLLKg(SEXP cvecSEXP, SEXP SiCellSEXP, SEXP dataSEXP, SEXP pSEXP, SEXP kSEXP, SEXP BSEXP, SEXP estGridSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cvec(cvecSEXP);
    Rcpp::traits::input_parameter< const std::vector<Eigen::MatrixXd>& >::type SiCell(SiCellSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type estGrid(estGridSEXP);
    rcpp_result_gen = Rcpp::wrap(NLLKg(cvec, SiCell, data, p, k, B, estGrid));
    return rcpp_result_gen;
END_RCPP
}
// get_SiCell
std::vector<Eigen::MatrixXd> get_SiCell(const Eigen::MatrixXd& data);
RcppExport SEXP _mGSFPCA_get_SiCell(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(get_SiCell(data));
    return rcpp_result_gen;
END_RCPP
}
// topdm_cpp
Eigen::MatrixXd topdm_cpp(const Eigen::MatrixXd& sig);
RcppExport SEXP _mGSFPCA_topdm_cpp(SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(topdm_cpp(sig));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mGSFPCA_LSQf", (DL_FUNC) &_mGSFPCA_LSQf, 7},
    {"_mGSFPCA_LSQg", (DL_FUNC) &_mGSFPCA_LSQg, 7},
    {"_mGSFPCA_NLLKf", (DL_FUNC) &_mGSFPCA_NLLKf, 7},
    {"_mGSFPCA_NLLKg", (DL_FUNC) &_mGSFPCA_NLLKg, 7},
    {"_mGSFPCA_get_SiCell", (DL_FUNC) &_mGSFPCA_get_SiCell, 1},
    {"_mGSFPCA_topdm_cpp", (DL_FUNC) &_mGSFPCA_topdm_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_mGSFPCA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
