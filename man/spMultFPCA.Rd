% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spMultFPCA.R
\name{spMultFPCA}
\alias{spMultFPCA}
\title{Sparse Multivariate Functional Principal Component Analysis}
\usage{
spMultFPCA(
  dataCell,
  r = NULL,
  G = NULL,
  basis_type = "bspline",
  nRegGrid = 51,
  grid_range = NULL,
  mu_nbasis = 15,
  M_npc = NULL,
  maxit = 500,
  optim_tol = 1e-05,
  optim_trace = 0,
  bin_size = 51
)
}
\arguments{
\item{dataCell}{A list of matrices or data frames, each with three columns:
ID (subject identifier), time (observation time points), and value
(observed values) for each functional variable.}

\item{r}{A list of integer vectors specifying candidate numbers of principal
components for each variable. If \code{NULL}, defaults to \code{3:5} for
each variable.}

\item{G}{A list of integer vectors specifying candidate numbers of basis
functions for each variable. If \code{NULL}, defaults to \code{c(5, 10, 15)}
for each variable.}

\item{basis_type}{Character string or vector specifying the type of basis
functions (\code{"bspline"} or \code{"fourier"}) for each variable. If a
single string, it is applied to all variables. Defaults to \code{"bspline"}.}

\item{nRegGrid}{Integer or list of integers specifying the number of points
in the regular grid for evaluation for each variable. If a single integer,
it is applied to all variables. If
\code{NULL}, defaults to \code{50} for each variable.}

\item{grid_range}{A list of numeric vectors of length 2 specifying the
observation range \code{[aT, bT]} for each variable. If a single range is
provided, it is applied to all variables. If \code{NULL}, ranges are
determined from the data.}

\item{mu_nbasis}{Integer or list of integers specifying the number of basis
functions for the mean function of each variable. If a single integer, it is
applied to all variables. If \code{NULL}, defaults to \code{15} for each
variable.}

\item{M_npc}{Integer specifying the number of multivariate principal
components to retain. If \code{NULL}, determined automatically using the
elbow method.}

\item{maxit}{Integer specifying the maximum number of iterations for the
optimization algorithm. Default is \code{500}.}

\item{optim_tol}{Numeric specifying the tolerance for optimization
convergence. Default is \code{1e-5}.}

\item{optim_trace}{Integer specifying the level of tracing information from
the optimization algorithm. Default is \code{0} (no tracing).}

\item{bin_size}{Integer or list of integers specifying the number of bins for
data binning for each variable. If a single integer, it is applied to all
variables.
If \code{NULL}, defaults to \code{51} for each variable.}
}
\value{
A list containing the following components:
\itemize{
\item \code{Ckk}: A list of results from \code{mGSFPCA} for each variable.
\item \code{scores}: A matrix of multivariate principal component scores
for each subject.
\item \code{eigFunctions}: A list of matrices, each containing the
multivariate eigenfunctions for a variable.
\item \code{values}: A vector of multivariate eigenvalues.
\item \code{vectors}: A matrix representing the eigenvectors associated
with the combined univariate score vectors
\item \code{npc}: The number of multivariate principal components retained.
\item \code{Cov}: The estimated multivariate covariance matrix.
\item \code{fullEigFun}: A matrix of concatenated multivariate
eigenfunctions across all variables.
}
}
\description{
Performs sparse multivariate functional principal component analysis
(spMultFPCA) on a list of functional datasets, estimating multivariate
principal components using the modified Gram-Schmidt Functional Principal
Component Analysis (mGSFPCA) for each variable and combining results via
singular value decomposition (SVD).
}
\details{
The \code{spMultFPCA} function performs multivariate functional principal
component analysis on sparse functional data by applying \code{mGSFPCA} to
each variable in \code{dataCell}.
}
\examples{
sp_mult_sim
tmp <- spMultFPCA(sp_mult_sim$obs_data,
                  r = rep(list(3:5), 3),
                  G = rep(list(5:10), 3),
                  nRegGrid = 100)
Metrics::rmse(tmp$Cov, sp_mult_sim$True_Cov)
grid <- seq(0, 1, length = 300)
plot(grid, sp_mult_sim$True_Eigs$funcs[,1], type ='l', ylab = 'phi')
lines(grid, -tmp$fullEigFun[,1], col = 2)

}
\references{
Happ, C., & Greven, S. (2018). Multivariate functional principal component
analysis for data observed on different dimensional domains. Journal of the
American Statistical Association, 113(522), 649â€“659.
}
